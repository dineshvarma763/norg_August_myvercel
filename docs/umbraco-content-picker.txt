import { LitElement, css, html } from 'https://cdn.jsdelivr.net/gh/lit/dist@2/all/lit-all.min.js'
import { contentPicker } from '@headless-backoffice-bridge'
//https://github.com/umbraco/Umbraco.Headless.Backoffice.Bridge/blob/master/src/pickers/content/index.ts
export default class extends LitElement {
  static properties = {
    value: { type: String },
    selected: { type: Object },
    active: {type: Boolean},
    contentName: { type: String },
    contentUrl: { type: String },  // new property for content URL
  }

  static styles = css`
.container {
  position: relative;
}

.content-details{
  min-heigt: 200px;
}

.controls {
  display: none;
  position: absolute;
  top: .5rem;
  right: .5rem;
}
.controls.--active {
  display: flex;
}

.controls button {
  display: inline-block;
  position: relative;
  padding: 6px 14px;
  margin: 0;
  font-size: 15px;
  line-height: 20px;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  background: var(--color-sand-5);
  color: var(--color-blue-extra-dark);
  border-color: var(--color-sand-5);
  border: none;
  box-shadow: none;
  border-radius: 3px;
  font-weight: 700;
}

.controls button:hover {
  color: var(--color-blue-mid);
  background-color: var(--color-sand-6);
  text-decoration: none;
  transition: background-position .1s linear;
}

.controls button:active {
  outline: 0;
  box-shadow: inset 0 2px 4px rgba(0,0,0,.15),0 1px 2px rgba(0,0,0,.05);
}

.controls button:focus {
  color: var(--color-blue-mid);
  background-color: var(--color-sand-6);
  text-decoration: none;
}

.placeholder {
  margin: 0;
  border: none;
  background: none;
  color: currentColor;
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
  line-height: var(--line-height-base);
  cursor: pointer;

  min-height: 110px;
  padding: 20px;
  padding-bottom: 30px;
  position: relative;
  background-color: var(--color-white);
  border: 4px dashed var(--color-gray-8);
  text-align: -moz-center;
  text-align: center;
  width: 100%;
  box-sizing: border-box;
}

.placeholder .icon svg {
  fill: var(--color-gray-8);
  font-size: 85px;
  line-height: 1;
  display: inline-block;
  height: 1.15em;
  width: 1.15em;
  margin: 10px auto;
}

.placeholder .help-text {
  color: var(--color-black);
  font-size: 14px;
  font-weight: 700;
  display: inline-block;
  clear: both;
}
  `

  async showPicker(content) {
    contentPicker.show({
      multiple: false,
      submit: (items) => {
        this.updateControlValue(items[0], items);
        this.fetchContentDetails(items[0].udi);  // fetch content details
      }
    })
    console.log("showPicker", content);
  }
  
   async fetchContentDetails(udi) {
    const id = udi.split('umb://document/')[1];  // extract GUID from UDI
      const response = await fetch(`https://cdn.umbraco.io/content/${id}`, {
    headers: {
      'Umb-Project-Alias': 'ata-automation',
      'Accept-Language' : 'en-US',
      'Api-Version' : '2',
      'Api-Key': <<<<ADD API KEY HERE>>>>
    }
  });
    const content = await response.json();
    this.contentName = content.name;
    this.contentUrl = content.url;  // assuming the response has a 'url' property
	
    this.selected = content;
  }

  updateControlValue(selectedItem, items) {
    this.value = {
      udi: selectedItem.udi,
    }
    if(selectedItem?.udi)
	    this.fetchContentDetails(selectedItem.udi);

    console.log('updateControlValue', this.value);
  }

  render() {

    if(!this.selected && this.value){
      this.fetchContentDetails(this.value.udi);
    }

	if (this.value?.udi && this.selected?.name) {
		return html`
		  <div class="container">
			<div class="content-details">
			  <h2 class="content-title">Content Name: ${this.selected.name}</h2>
			  <p class="content-url">Content Location: <a href="/umbraco/#/content/content/edit/${this.selected._id}" target="_blank">${this.selected._url}</a></p>
			  <p class="content-alias">Alias: ${this.selected.contentTypeAlias}</p>
			</div>

			<div class="controls ${this.active ? '--active' : ''}">
			  <button type="button" @click=${() => this.showPicker()}>Select Content</button>
			  <button type="button" @click=${() => this.showPicker(this.value)}>Edit</button>
			</div>
		  </div>`
	  } else if(this.value){
      return html`
		  <div class="container">
			<div class="content-details">
			  <h2 class="content-title">Value: ${this.value.udi}</h2>
			</div>`
	  }
    

    return html`<button type="button" class="btn-reset placeholder" @click=${() => this.showPicker()}>
      <div class="icon">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <path d="M246.486 299.31l-85.604-91.047-58.21 107.66v29.658h289.12c-36.821-31.753-114.476-99.682-114.476-99.682l-30.83 53.411zM347 230.786c16.062 0 29.073-13 29.073-29.06 0-16.04-13.012-29.062-29.073-29.062-16.019 0-29.038 13.021-29.038 29.062 0 16.06 13.019 29.06 29.038 29.06zM37.74 102.699v306.569h434.688V102.699H37.74zm396.082 267.916H77.635l-.016-228.033h354.928v.017h1.275v228.016z"></path>
        </svg>
      </div>
      <span class="help-text">Click to insert a component</span>
  </button>`
  }
}
